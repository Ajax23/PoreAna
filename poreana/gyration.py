################################################################################
# Gyration                                                                     #
#                                                                              #
"""Analyse gyration radius in a pore."""
################################################################################


import seaborn as sns
import matplotlib.pyplot as plt

import poreana.utils as utils


def bins_plot(data_link_gyr, data_link_dens, intent="", pore_id = "shape_00", is_mean=False, is_norm=False, kwargs={}):
    """This function plots the gyration radius. If an intent is
    given instead, only a plot-function will be called. Available
    options for ``intent`` are

    * empty string - Create subplots for the density inside and outside the pore
    * **in** - Create plot for the density inside pore
    * **ex** - Create plot for the density outside pore

    Parameters
    ----------
    data_link_dens : string
        Link to density hdf5, obj or yml data file generated by the sample rountine
        :func:`poreana.sample.Sample.init_density`
    data_link_gyr : string
        Link to gyration data object generated by the sample routine
        :func:`poreana.sample.Sample.init_gyration`
    intent : string, optional
        Intent for plotting
    pore_id : string, optional
        If there is more than one shape in the structure, select the shape you want the results to be.
    is_mean : bool, optional
        True to plot mean values
    is_norm : bool, optional
        True to normalize x-axis
    kwargs: dict, optional
        Dictionary with plotting parameters (only with given intent)

    Returns
    -------
    mean : dictionary
        Mean value of the radius of gyration inside and outside the pore in nm
    """
    # Load data
    gyr = utils.load(data_link_gyr)
    dens = utils.load(data_link_dens)

    is_pore = "pore" in gyr
    width = {}
    width["in"] = gyr["data"][pore_id]["in_width"][:-1] if is_pore else []
    width["ex"] = gyr["data"]["ex_width"]

    if is_norm:
        for key, val in width.items():
            x_max = val[-1]
            width[key] = [x/x_max for x in val]

    areas = ["in", "ex"] if is_pore else ["ex"]

    # Divide gyration radius by density in bins
    gyration = {"ex": [], "in": []}
    gyration["in"] = [gyr["data"][pore_id]["in"][i]/dens["data"][pore_id]["in"][i] if dens["data"][pore_id]["in"][i] else 0 for i in range(len(gyr["data"][pore_id]["in"]))] if is_pore else []
    gyration["ex"] = [gyr["data"]["ex"][i]/dens["data"]["ex"][i] if dens["data"]["ex"][i] else 0 for i in range(len(gyr["data"]["ex"]))]
    # Calculate mean gyration radius
    mean = {area: sum(gyration[area])/len(gyration[area]) for area in areas}

    # Full plot
    if not intent:
        plt.subplot(211)
        sns.lineplot(x=width["in"], y=gyration["in"])
        if is_mean:
            sns.lineplot(x=width["in"], y=[mean["in"] for x in width["in"]])

        plt.xlim([0, width["in"][-1]])
        plt.xlabel("Distance from pore center (nm)")
        plt.ylabel(r"Radius (nm)")
        plt.legend(["Gyration radius", "Mean"])

        plt.subplot(212)
        sns.lineplot(x=width["ex"], y=gyration["ex"])
        if is_mean:
            sns.lineplot(x=width["ex"], y=[mean["ex"] for x in width["ex"]])

        plt.xlim([0, width["ex"][-1]])
        plt.xlabel("Distance from reservoir end (nm)")
        plt.ylabel(r"Radius (nm)")
        plt.legend(["Gyration radius", "Mean"])

    # Intent plots
    else:
        if intent not in ["in", "ex"]:
            print("Invalid intent. Check documentation for available options.")
            return

        sns.lineplot(x=width[intent], y=gyration[intent], **kwargs)
        plt.xlim([0, width[intent][-1]])

    return mean
